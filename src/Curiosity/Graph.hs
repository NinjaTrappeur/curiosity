module Curiosity.Graph
  ( graph
  ) where

import qualified Curiosity.Data                as Data
import qualified Curiosity.Data.Business       as Business
import qualified Curiosity.Data.Legal          as Legal
import qualified Curiosity.Data.User           as User


--------------------------------------------------------------------------------
graph :: Data.HaskDb -> [Text]
graph state =
  [ "// Generated by `cty graph`." ]
  <> header
  <> userNodes state
  <> unitNodes state
  <> entityNodes state
  <> footer


--------------------------------------------------------------------------------
header :: [Text]
header =
  [ "digraph hello {"
  , "  graph ["
  , "    label = \"state-0\\n\\n\""
  , "    labelloc = t"
  , "    fontname = \"Helvetica,Arial,sans-serif\""
  , "    fontsize = 20"
  , "    layout = dot"
  , "    rankdir = LR"
  , "    newrank = true"
  , "  ]"
  , "  node ["
  , "    style=filled"
  , "    shape=rect"
  , "    pencolor=\"#eeeeee\" // node border"
  , "    fontname=\"Helvetica,Arial,sans-serif\""
  , "    shape=plaintext"
  , "  ]"
  , "  edge ["
  , "    arrowsize=0.5"
  , "    fontname=\"Helvetica,Arial,sans-serif\""
  , "    labeldistance=3"
  , "    labelfontcolor=\"#cccccc\""
  , "    penwidth=2"
  , "    style=dashed"
  , "  ]"
  ]

footer :: [Text]
footer = [ "}" ]


--------------------------------------------------------------------------------
userNodes :: Data.HaskDb -> [Text]
userNodes state = 
  concatMap userNode $ reverse userProfiles
 where
  Identity userProfiles = Data._dbUserProfiles state

userNode :: User.UserProfile -> [Text]
userNode User.UserProfile {..} =
  [ "" <> username <> " ["
  , "  color=\"#ffffff\""
  , "  label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">"
  , "    <tr> <td> <b>" <> username <> "</b><br/>" <> userId <> "</td> </tr>"
  , "  </table>>"
  , "  shape=plain"
  , "]"
  ]
 where
  userId = User.unUserId _userProfileId
  username = User.unUserName $ User._userCredsName _userProfileCreds


--------------------------------------------------------------------------------
entityNodes :: Data.HaskDb -> [Text]
entityNodes state = 
  concatMap entityNode $ reverse entities
 where
  Identity entities = Data._dbLegalEntities state

entityNode :: Legal.Entity -> [Text]
entityNode Legal.Entity {..} =
  [ "" <> slug <> " ["
  , "  color=\"#ffffff\""
  , "  label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">"
  , "    <tr> <td> <b>" <> slug <> "</b><br/>" <> id <> "</td> </tr>"
  , "  </table>>"
  , "  shape=plain"
  , "]"
  ]
 where
  id = Legal.unEntityId _entityId
  slug = _entitySlug


--------------------------------------------------------------------------------
unitNodes :: Data.HaskDb -> [Text]
unitNodes state = 
  concatMap unitNode $ reverse units
 where
  Identity units = Data._dbBusinessUnits state

unitNode :: Business.Unit -> [Text]
unitNode Business.Unit {..} =
  [ "" <> slug <> " ["
  , "  color=\"#ffffff\""
  , "  label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">"
  , "    <tr> <td> <b>" <> slug <> "</b><br/>" <> id <> "</td> </tr>"
  , "  </table>>"
  , "  shape=plain"
  , "]"
  ]
 where
  id = Business.unUnitId _entityId
  slug = _entitySlug
